PREHOOK: query: create table test_1 ( t bigint , a bigint ) STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
POSTHOOK: query: create table test_1 ( t bigint , a bigint ) STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_1
PREHOOK: query: -- Windows that do not include the CURRENT ROW.
--
LOAD DATA LOCAL INPATH '../../data/files/ptf_windows_no_curr_row_1.txt' INTO TABLE test_1
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@test_1
POSTHOOK: query: -- Windows that do not include the CURRENT ROW.
--
LOAD DATA LOCAL INPATH '../../data/files/ptf_windows_no_curr_row_1.txt' INTO TABLE test_1
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@test_1
PREHOOK: query: EXPLAIN
SELECT t, 
a, 
sum(a) OVER (PARTITION BY t,a ORDER BY a ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) AS sum_a 
FROM test_1
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT t, 
a, 
sum(a) OVER (PARTITION BY t,a ORDER BY a ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) AS sum_a 
FROM test_1
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: test_1
            Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
            Reduce Output Operator
              key expressions: t (type: bigint), a (type: bigint), a (type: bigint)
              sort order: +++
              Map-reduce partition columns: t (type: bigint), a (type: bigint)
              Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
              value expressions: t (type: bigint), a (type: bigint)
      Reduce Operator Tree:
        Extract
          Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
          PTF Operator
            Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: _col0 (type: bigint), _col1 (type: bigint), _wcol0 (type: bigint)
              outputColumnNames: _col0, _col1, _col2
              Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
              File Output Operator
                compressed: false
                Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
                table:
                    input format: org.apache.hadoop.mapred.TextInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT t, 
a, 
sum(a) OVER (PARTITION BY t,a ORDER BY a ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) AS sum_a 
FROM test_1
PREHOOK: type: QUERY
PREHOOK: Input: default@test_1
#### A masked pattern was here ####
POSTHOOK: query: SELECT t, 
a, 
sum(a) OVER (PARTITION BY t,a ORDER BY a ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) AS sum_a 
FROM test_1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_1
#### A masked pattern was here ####
1	1	NULL
1	1	1
1	1	1
2	5	NULL
3	3	NULL
4	5	NULL
4	5	5
4	5	5
4	5	5
5	4	NULL
6	11	NULL
6	11	11
PREHOOK: query: EXPLAIN
SELECT t, 
a, 
sum(a) OVER (PARTITION BY t,a ORDER BY a ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING) AS sum_a 
FROM test_1
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT t, 
a, 
sum(a) OVER (PARTITION BY t,a ORDER BY a ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING) AS sum_a 
FROM test_1
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: test_1
            Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
            Reduce Output Operator
              key expressions: t (type: bigint), a (type: bigint), a (type: bigint)
              sort order: +++
              Map-reduce partition columns: t (type: bigint), a (type: bigint)
              Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
              value expressions: t (type: bigint), a (type: bigint)
      Reduce Operator Tree:
        Extract
          Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
          PTF Operator
            Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: _col0 (type: bigint), _col1 (type: bigint), _wcol0 (type: bigint)
              outputColumnNames: _col0, _col1, _col2
              Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
              File Output Operator
                compressed: false
                Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
                table:
                    input format: org.apache.hadoop.mapred.TextInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT t, 
a, 
sum(a) OVER (PARTITION BY t,a ORDER BY a ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING) AS sum_a 
FROM test_1
PREHOOK: type: QUERY
PREHOOK: Input: default@test_1
#### A masked pattern was here ####
POSTHOOK: query: SELECT t, 
a, 
sum(a) OVER (PARTITION BY t,a ORDER BY a ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING) AS sum_a 
FROM test_1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_1
#### A masked pattern was here ####
1	1	NULL
1	1	1
1	1	2
2	5	NULL
3	3	NULL
4	5	NULL
4	5	5
4	5	10
4	5	10
5	4	NULL
6	11	NULL
6	11	11
PREHOOK: query: EXPLAIN
SELECT t, 
a, 
sum(a) OVER (PARTITION BY t,a ORDER BY a ROWS BETWEEN 2 PRECEDING AND 2 PRECEDING) AS sum_a 
FROM test_1
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT t, 
a, 
sum(a) OVER (PARTITION BY t,a ORDER BY a ROWS BETWEEN 2 PRECEDING AND 2 PRECEDING) AS sum_a 
FROM test_1
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: test_1
            Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
            Reduce Output Operator
              key expressions: t (type: bigint), a (type: bigint), a (type: bigint)
              sort order: +++
              Map-reduce partition columns: t (type: bigint), a (type: bigint)
              Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
              value expressions: t (type: bigint), a (type: bigint)
      Reduce Operator Tree:
        Extract
          Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
          PTF Operator
            Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: _col0 (type: bigint), _col1 (type: bigint), _wcol0 (type: bigint)
              outputColumnNames: _col0, _col1, _col2
              Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
              File Output Operator
                compressed: false
                Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
                table:
                    input format: org.apache.hadoop.mapred.TextInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT t, 
a, 
sum(a) OVER (PARTITION BY t,a ORDER BY a ROWS BETWEEN 2 PRECEDING AND 2 PRECEDING) AS sum_a 
FROM test_1
PREHOOK: type: QUERY
PREHOOK: Input: default@test_1
#### A masked pattern was here ####
POSTHOOK: query: SELECT t, 
a, 
sum(a) OVER (PARTITION BY t,a ORDER BY a ROWS BETWEEN 2 PRECEDING AND 2 PRECEDING) AS sum_a 
FROM test_1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_1
#### A masked pattern was here ####
1	1	NULL
1	1	NULL
1	1	1
2	5	NULL
3	3	NULL
4	5	NULL
4	5	NULL
4	5	5
4	5	5
5	4	NULL
6	11	NULL
6	11	NULL
PREHOOK: query: EXPLAIN
SELECT t, 
a, 
sum(a) OVER (PARTITION BY t,a ORDER BY a ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING) AS sum_a 
FROM test_1
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT t, 
a, 
sum(a) OVER (PARTITION BY t,a ORDER BY a ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING) AS sum_a 
FROM test_1
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: test_1
            Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
            Reduce Output Operator
              key expressions: t (type: bigint), a (type: bigint), a (type: bigint)
              sort order: +++
              Map-reduce partition columns: t (type: bigint), a (type: bigint)
              Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
              value expressions: t (type: bigint), a (type: bigint)
      Reduce Operator Tree:
        Extract
          Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
          PTF Operator
            Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: _col0 (type: bigint), _col1 (type: bigint), _wcol0 (type: bigint)
              outputColumnNames: _col0, _col1, _col2
              Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
              File Output Operator
                compressed: false
                Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
                table:
                    input format: org.apache.hadoop.mapred.TextInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT t, 
a, 
sum(a) OVER (PARTITION BY t,a ORDER BY a ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING) AS sum_a 
FROM test_1
PREHOOK: type: QUERY
PREHOOK: Input: default@test_1
#### A masked pattern was here ####
POSTHOOK: query: SELECT t, 
a, 
sum(a) OVER (PARTITION BY t,a ORDER BY a ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING) AS sum_a 
FROM test_1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_1
#### A masked pattern was here ####
1	1	1
1	1	1
1	1	NULL
2	5	NULL
3	3	NULL
4	5	5
4	5	5
4	5	5
4	5	NULL
5	4	NULL
6	11	11
6	11	NULL
PREHOOK: query: EXPLAIN
SELECT t, 
a, 
sum(a) OVER (PARTITION BY t,a ORDER BY a ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING) AS sum_a 
FROM test_1
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT t, 
a, 
sum(a) OVER (PARTITION BY t,a ORDER BY a ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING) AS sum_a 
FROM test_1
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: test_1
            Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
            Reduce Output Operator
              key expressions: t (type: bigint), a (type: bigint), a (type: bigint)
              sort order: +++
              Map-reduce partition columns: t (type: bigint), a (type: bigint)
              Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
              value expressions: t (type: bigint), a (type: bigint)
      Reduce Operator Tree:
        Extract
          Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
          PTF Operator
            Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: _col0 (type: bigint), _col1 (type: bigint), _wcol0 (type: bigint)
              outputColumnNames: _col0, _col1, _col2
              Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
              File Output Operator
                compressed: false
                Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
                table:
                    input format: org.apache.hadoop.mapred.TextInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT t, 
a, 
sum(a) OVER (PARTITION BY t,a ORDER BY a ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING) AS sum_a 
FROM test_1
PREHOOK: type: QUERY
PREHOOK: Input: default@test_1
#### A masked pattern was here ####
POSTHOOK: query: SELECT t, 
a, 
sum(a) OVER (PARTITION BY t,a ORDER BY a ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING) AS sum_a 
FROM test_1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_1
#### A masked pattern was here ####
1	1	2
1	1	1
1	1	NULL
2	5	NULL
3	3	NULL
4	5	10
4	5	10
4	5	5
4	5	NULL
5	4	NULL
6	11	11
6	11	NULL
PREHOOK: query: EXPLAIN
SELECT t, 
a, 
sum(a) OVER (PARTITION BY t,a ORDER BY a ROWS BETWEEN 2 FOLLOWING AND 2 FOLLOWING) AS sum_a 
FROM test_1
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT t, 
a, 
sum(a) OVER (PARTITION BY t,a ORDER BY a ROWS BETWEEN 2 FOLLOWING AND 2 FOLLOWING) AS sum_a 
FROM test_1
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: test_1
            Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
            Reduce Output Operator
              key expressions: t (type: bigint), a (type: bigint), a (type: bigint)
              sort order: +++
              Map-reduce partition columns: t (type: bigint), a (type: bigint)
              Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
              value expressions: t (type: bigint), a (type: bigint)
      Reduce Operator Tree:
        Extract
          Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
          PTF Operator
            Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: _col0 (type: bigint), _col1 (type: bigint), _wcol0 (type: bigint)
              outputColumnNames: _col0, _col1, _col2
              Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
              File Output Operator
                compressed: false
                Statistics: Num rows: 3 Data size: 50 Basic stats: COMPLETE Column stats: NONE
                table:
                    input format: org.apache.hadoop.mapred.TextInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT t, 
a, 
sum(a) OVER (PARTITION BY t,a ORDER BY a ROWS BETWEEN 2 FOLLOWING AND 2 FOLLOWING) AS sum_a 
FROM test_1
PREHOOK: type: QUERY
PREHOOK: Input: default@test_1
#### A masked pattern was here ####
POSTHOOK: query: SELECT t, 
a, 
sum(a) OVER (PARTITION BY t,a ORDER BY a ROWS BETWEEN 2 FOLLOWING AND 2 FOLLOWING) AS sum_a 
FROM test_1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_1
#### A masked pattern was here ####
1	1	1
1	1	NULL
1	1	NULL
2	5	NULL
3	3	NULL
4	5	5
4	5	5
4	5	NULL
4	5	NULL
5	4	NULL
6	11	NULL
6	11	NULL
